__precompile__

mutable struct Euler
    gamma::Float64; # isotropic exponent
    SpecificR::Float64; # specific gas constant
    function Euler(s::Settings)
        new(s.gamma,s.SpecificR)
    end
end

# determine primitives from conservatives
function primFromCons(obj::Euler,conservatives::Array{Float64,1})
    rho=conservatives[1];
    rhoInv=1/rho;
    u=conservatives[2]*rhoInv;
    kineticEnergy=0.5*rho*u^2;
    innerEnergy=(conservatives[3]-kineticEnergy)*rhoInv;
    p=rho*(obj.gamma-1)*innerEnergy;
    a=sqrt(obj.gamma*p*rhoInv);
    T=p*rhoInv/obj.SpecificR;
    return rho,p,u,a,T;
end

# determine primitives from conservatives
function SpeedFromCons(obj::Euler,conservatives::Array{Float64,1})
    rhoInv=1.0/conservatives[1];
    u=conservatives[2]*rhoInv;
    p=(obj.gamma-1.0)*(conservatives[3]-0.5*conservatives[1]*u^2);
    if obj.gamma*p*rhoInv > 0
        a=sqrt(obj.gamma*p*rhoInv);
    else
        a = 0;
    end
    return u,a;
end

# determine primitives from conservatives
function SpeedPressureFromCons(obj::Euler,conservatives::Array{Float64,1})
    rhoInv=1/conservatives[1];
    if rhoInv < 1/0.1
        rhoInv = 0.1;
    end
    u=conservatives[2]*rhoInv;
    p=(obj.gamma-1.0)*(conservatives[3]-0.5*conservatives[1]*u^2);
    return p,u;
end

# determine conservatives from primitives
function consFromPrim(obj::Euler,primitives::Array{Float64,1})
    rho = primitives[1]; p = primitives[2]; u = primitives[3];
    rhov=rho*u;
    kineticEnergy=0.5*rho*u^2;
    innerEnergy=(p/(rho*(obj.gamma-1)))*rho;
    rhoe=kineticEnergy+innerEnergy;
    conservatives = [rho;rhov;rhoe];
    return conservatives;
end

# physical flux
function physicalFlux(obj::Euler,conservatives::Array{Float64,1})
    p,u = SpeedPressureFromCons(obj,conservatives);
    if p < 0.1
        p = 0.1;
    end
    flux = zeros(3);
    flux[1]=conservatives[2];
    flux[2]=conservatives[2]*u+p;
    flux[3]=(conservatives[3]+p)*u;
    return flux;
end

function getCFL(obj::Euler,state::Array{Float64,1},dt,dx)
    rho,p,u,a,T = primFromCons(obj,state);
    speedMin = u-a;
    speedMax = u+a;
    speed=max(abs(speedMax),abs(speedMin));
    cfl=speed*dt/dx; 
    return cfl;
end